/* MIT License
 *
 * Copyright 2014-2021 Sylvain Hallé
 *
 * Laboratoire d'informatique formelle
 * Université du Québec à Chicoutimi, Canada
 *
 * Permission is hereby granted, free of charge, to any person obtaining a 
 * copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation 
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to 
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *  
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

package ca.uqac.lif.bullwinkle.output;

import java.util.ArrayDeque;
import java.util.Deque;

import ca.uqac.lif.bullwinkle.CaptureBlockParseNode;
import ca.uqac.lif.bullwinkle.ParseNode;

/**
 * Visitor that builds a DOT file from a parse tree. The file can be used
 * by <a href="http://graphviz.org/">Graphviz</a> to display a parse tree
 * graphically.
 * 
 * @author Sylvain Hallé
 */
public class GraphvizVisitor implements OutputFormatVisitor
{
	/**
	 * A stack keeping the parent node IDs
	 */
	private Deque<Integer> m_parents;

	/**
	 * A counter keeping the last integer used for node IDs
	 */
	private int m_nodeCount = 0;

	/**
	 * A string builder where the file contents are progressively created
	 */
	private StringBuilder m_output;

	/**
	 * Creates a new GraphvizVisitor with default settings 
	 */
	public GraphvizVisitor()
	{
		super();
		m_parents = new ArrayDeque<Integer>();
		m_output = new StringBuilder();
	}

	@Override
	public void visit(final ParseNode node)
	{
		int cur_node = m_nodeCount++;
		if (!m_parents.isEmpty())
		{
			int parent = m_parents.peek();
			m_output.append(parent).append(" -> ").append(cur_node).append(";\n");
		}
		String shape = "oval";
		if (node instanceof CaptureBlockParseNode)
		{
			// Special treatment for regex capture blocks
			shape = "rectangle";
		}
		String color = "white";
		String fillcolor = "blue";
		String label = escape(node.getValue());
		if (label == null)
		{
			label = escape(node.getToken());
			shape = "rect";
			fillcolor = "white";
			color = "black";
		}
		m_output.append("  ").append(cur_node).append(" [fontcolor=\"").append(color).append("\",style=\"filled\",fillcolor=\"").append(fillcolor).append("\",shape=\"").append(shape).append("\",label=\"").append(label).append("\"];\n");
		m_parents.push(cur_node);
	}

	@Override
	public void pop()
	{
		m_parents.pop();
	}

	@Override
	public String toOutputString()
	{
		StringBuilder out = new StringBuilder();
		out.append("# File auto-generated by Bullwinkle\n\n");
		out.append("digraph G {\n").append(m_output).append("}");
		return out.toString();
	}

	/**
	 * Escapes a few characters in a string to make it compatible with
	 * DOT files
	 * @param input The input string
	 * @return The escaped string
	 */
	private static String escape(/*@Null*/ String input)
	{
		if (input == null)
		{
			return null;
		}
		return input.replaceAll("\\\"", "&quot;");
	}

}
